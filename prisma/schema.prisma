// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Domyślna konfiguracja dla PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Model Użytkownika - rozbudowany o pola wymagane przez Next-Auth
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  role           String?
  emailVerified  DateTime? // Musi być DateTime, a nie Boolean!
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relacje do innych modeli Next-Auth
  accounts     Account[]
  sessions     Session[]
  createdCalls CallRoom[] @relation("Admin")
  joinedCalls  CallRoom[] @relation("Student")
}

// Model Konta - przechowuje połączenie z dostawcami OAuth (np. Google)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Model Sesji - przechowuje aktywne sesje użytkowników
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Model Tokena Weryfikacyjnego - używany np. przy logowaniu bezhasłowym
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CallRoom {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Kto stworzył rozmowę (admin)
  adminId   String
  admin     User     @relation("Admin", fields: [adminId], references: [id])

  // Kto jest zaproszony (uczeń)
  studentId String
  student   User     @relation("Student", fields: [studentId], references: [id])

  // Status pokoju, np. 'waiting', 'active', 'finished'
  status    String   @default("waiting")
}