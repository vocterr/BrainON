datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AppointmentStatus {
  UPCOMING
  COMPLETED
  NOT_COMPLETED
  CANCELLED
}

enum AppointmentType {
  ONLINE
  TEACHER_HOME
  STUDENT_HOME
}

enum Subject {
  MATEMATYKA
  INF02
}

enum CallStatus {
  INITIATED
  RINGING
  CONNECTED
  ENDED
  FAILED
  REJECTED
  MISSED
}

// Model Użytkownika - rozbudowany o pola wymagane przez Next-Auth
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  role           String?   @default("USER") // USER or ADMIN
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  hasUsedFreeLesson Boolean @default(false)

  // Next-Auth relations
  accounts     Account[]
  sessions     Session[]
  
  // Call relations
  createdCalls CallRoom[]   @relation("Admin")
  joinedCalls  CallRoom[]   @relation("Student")
  
  // Call record relations
  adminCalls    CallRecord[] @relation("AdminCalls")
  studentCalls  CallRecord[] @relation("StudentCalls")
  
  // Appointment relations
  lessonsAsTeacher Appointment[] @relation("Teacher")
  lessonsAsStudent Appointment[] @relation("Student")
}

// Model Konta - przechowuje połączenie z dostawcami OAuth (np. Google)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Model Sesji - przechowuje aktywne sesje użytkowników
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Model Tokena Weryfikacyjnego - używany np. przy logowaniu bezhasłowym
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Model for video call rooms
model CallRoom {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Kto stworzył rozmowę (admin/teacher)
  adminId   String
  admin     User     @relation("Admin", fields: [adminId], references: [id])

  // Kto jest zaproszony (uczeń)
  studentId String
  student   User     @relation("Student", fields: [studentId], references: [id])

  // Status pokoju
  status    String   @default("waiting") // waiting, active, finished
}

// Model for tracking call history and analytics
model CallRecord {
  id          String    @id @default(uuid())
  adminId     String
  studentId   String
  status      CallStatus @default(INITIATED)
  startedAt   DateTime   @default(now())
  connectedAt DateTime?
  endedAt     DateTime?
  duration    Int?       // Duration in seconds
  
  admin       User      @relation("AdminCalls", fields: [adminId], references: [id])
  student     User      @relation("StudentCalls", fields: [studentId], references: [id])
  
  @@index([adminId])
  @@index([studentId])
  @@index([startedAt])
}

// Model for appointments/lessons
model Appointment {
  id            String            @id @default(cuid())
  createdAt     DateTime          @default(now())
  date          DateTime          // Data i godzina lekcji
  status        AppointmentStatus @default(UPCOMING)
  type          AppointmentType
  subject       Subject
  price         Int               // Cena w groszach
  notes         String?           // Notatki od ucznia
  contactInfo   Json?           // ✅ NOWE POLE: Dane kontaktowe do lekcji online
  paymentStatus String?
  address       String?
  teacherId     String
  teacher       User              @relation("Teacher", fields: [teacherId], references: [id])

  studentId     String
  student       User              @relation("Student", fields: [studentId], references: [id])
  paymentIntentId String?

  @@index([date])
  @@index([teacherId])
  @@index([studentId])
  @@index([status])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}